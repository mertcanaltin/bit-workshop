import {
  AcmeTheme
} from "./chunk-E5PNRBBM.js";
import "./chunk-SSNK3GPG.js";
import "./chunk-CLW5AKVF.js";
import {
  ApolloClient,
  ApolloLink,
  ApolloProvider,
  InMemoryCache,
  Observable,
  __assign,
  __extends,
  addTypenameToDocument,
  cloneDeep,
  equal,
  invariant,
  print,
  removeClientSetsFromDocument,
  removeConnectionDirectiveFromDocument,
  stringifyForDisplay
} from "./chunk-ZP6UCNQO.js";
import {
  require_jsx_runtime
} from "./chunk-QE5EOC5M.js";
import {
  MemoryRouter,
  init_dist
} from "./chunk-UWQ6UF2F.js";
import "./chunk-KSTARX4B.js";
import {
  require_react
} from "./chunk-JBUEZKTR.js";
import {
  __toESM
} from "./chunk-CEQRFMJQ.js";

// node_modules/.pnpm/@acme+acme.testing.mock-provider@1.0.6_@apollo+client@3.9.9_@testing-library+react@14.2.2_rea_kott2a6aoem2xaf77xrueejvxy/node_modules/@acme/acme.testing.mock-provider/dist/mock-provider.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
init_dist();

// node_modules/.pnpm/@apollo+client@3.9.9_@types+react@18.2.23_graphql@16.8.1_react-dom@18.2.0_react@18.2.0/node_modules/@apollo/client/testing/react/MockedProvider.js
var React = __toESM(require_react(), 1);

// node_modules/.pnpm/@apollo+client@3.9.9_@types+react@18.2.23_graphql@16.8.1_react-dom@18.2.0_react@18.2.0/node_modules/@apollo/client/testing/core/mocking/mockLink.js
function requestToKey(request, addTypename) {
  var queryString = request.query && print(addTypename ? addTypenameToDocument(request.query) : request.query);
  var requestKey = { query: queryString };
  return JSON.stringify(requestKey);
}
var MockLink = (
  /** @class */
  function(_super) {
    __extends(MockLink2, _super);
    function MockLink2(mockedResponses, addTypename, options) {
      if (addTypename === void 0) {
        addTypename = true;
      }
      if (options === void 0) {
        options = /* @__PURE__ */ Object.create(null);
      }
      var _a;
      var _this = _super.call(this) || this;
      _this.addTypename = true;
      _this.showWarnings = true;
      _this.mockedResponsesByKey = {};
      _this.addTypename = addTypename;
      _this.showWarnings = (_a = options.showWarnings) !== null && _a !== void 0 ? _a : true;
      if (mockedResponses) {
        mockedResponses.forEach(function(mockedResponse) {
          _this.addMockedResponse(mockedResponse);
        });
      }
      return _this;
    }
    MockLink2.prototype.addMockedResponse = function(mockedResponse) {
      var normalizedMockedResponse = this.normalizeMockedResponse(mockedResponse);
      var key = requestToKey(normalizedMockedResponse.request, this.addTypename);
      var mockedResponses = this.mockedResponsesByKey[key];
      if (!mockedResponses) {
        mockedResponses = [];
        this.mockedResponsesByKey[key] = mockedResponses;
      }
      mockedResponses.push(normalizedMockedResponse);
    };
    MockLink2.prototype.request = function(operation) {
      var _this = this;
      var _a;
      this.operation = operation;
      var key = requestToKey(operation, this.addTypename);
      var unmatchedVars = [];
      var requestVariables = operation.variables || {};
      var mockedResponses = this.mockedResponsesByKey[key];
      var responseIndex = mockedResponses ? mockedResponses.findIndex(function(res, index) {
        var mockedResponseVars = res.request.variables || {};
        if (equal(requestVariables, mockedResponseVars)) {
          return true;
        }
        if (res.variableMatcher && res.variableMatcher(operation.variables)) {
          return true;
        }
        unmatchedVars.push(mockedResponseVars);
        return false;
      }) : -1;
      var response = responseIndex >= 0 ? mockedResponses[responseIndex] : void 0;
      var delay = (response === null || response === void 0 ? void 0 : response.delay) === Infinity ? 0 : (_a = response === null || response === void 0 ? void 0 : response.delay) !== null && _a !== void 0 ? _a : 0;
      var configError;
      if (!response) {
        configError = new Error("No more mocked responses for the query: ".concat(print(operation.query), "\nExpected variables: ").concat(stringifyForDisplay(operation.variables), "\n").concat(unmatchedVars.length > 0 ? "\nFailed to match ".concat(unmatchedVars.length, " mock").concat(unmatchedVars.length === 1 ? "" : "s", " for this query. The mocked response had the following variables:\n").concat(unmatchedVars.map(function(d) {
          return "  ".concat(stringifyForDisplay(d));
        }).join("\n"), "\n") : ""));
        if (this.showWarnings) {
          console.warn(configError.message + "\nThis typically indicates a configuration error in your mocks setup, usually due to a typo or mismatched variable.");
        }
      } else {
        if (response.maxUsageCount && response.maxUsageCount > 1) {
          response.maxUsageCount--;
        } else {
          mockedResponses.splice(responseIndex, 1);
        }
        var newData = response.newData;
        if (newData) {
          response.result = newData(operation.variables);
          mockedResponses.push(response);
        }
        if (!response.result && !response.error && response.delay !== Infinity) {
          configError = new Error("Mocked response should contain either `result`, `error` or a `delay` of `Infinity`: ".concat(key));
        }
      }
      return new Observable(function(observer) {
        var timer = setTimeout(function() {
          if (configError) {
            try {
              if (_this.onError(configError, observer) !== false) {
                throw configError;
              }
            } catch (error) {
              observer.error(error);
            }
          } else if (response && response.delay !== Infinity) {
            if (response.error) {
              observer.error(response.error);
            } else {
              if (response.result) {
                observer.next(typeof response.result === "function" ? response.result(operation.variables) : response.result);
              }
              observer.complete();
            }
          }
        }, delay);
        return function() {
          clearTimeout(timer);
        };
      });
    };
    MockLink2.prototype.normalizeMockedResponse = function(mockedResponse) {
      var _a;
      var newMockedResponse = cloneDeep(mockedResponse);
      var queryWithoutConnection = removeConnectionDirectiveFromDocument(newMockedResponse.request.query);
      invariant(queryWithoutConnection, 64);
      newMockedResponse.request.query = queryWithoutConnection;
      var query = removeClientSetsFromDocument(newMockedResponse.request.query);
      if (query) {
        newMockedResponse.request.query = query;
      }
      mockedResponse.maxUsageCount = (_a = mockedResponse.maxUsageCount) !== null && _a !== void 0 ? _a : 1;
      invariant(mockedResponse.maxUsageCount > 0, 65, mockedResponse.maxUsageCount);
      this.normalizeVariableMatching(newMockedResponse);
      return newMockedResponse;
    };
    MockLink2.prototype.normalizeVariableMatching = function(mockedResponse) {
      var variables = mockedResponse.request.variables;
      if (mockedResponse.variableMatcher && variables) {
        throw new Error("Mocked response should contain either variableMatcher or request.variables");
      }
      if (!mockedResponse.variableMatcher) {
        mockedResponse.variableMatcher = function(vars) {
          var requestVariables = vars || {};
          var mockedResponseVariables = variables || {};
          return equal(requestVariables, mockedResponseVariables);
        };
      }
    };
    return MockLink2;
  }(ApolloLink)
);

// node_modules/.pnpm/@apollo+client@3.9.9_@types+react@18.2.23_graphql@16.8.1_react-dom@18.2.0_react@18.2.0/node_modules/@apollo/client/testing/core/mocking/mockSubscriptionLink.js
var MockSubscriptionLink = (
  /** @class */
  function(_super) {
    __extends(MockSubscriptionLink2, _super);
    function MockSubscriptionLink2() {
      var _this = _super.call(this) || this;
      _this.unsubscribers = [];
      _this.setups = [];
      _this.observers = [];
      return _this;
    }
    MockSubscriptionLink2.prototype.request = function(operation) {
      var _this = this;
      this.operation = operation;
      return new Observable(function(observer) {
        _this.setups.forEach(function(x) {
          return x();
        });
        _this.observers.push(observer);
        return function() {
          _this.unsubscribers.forEach(function(x) {
            return x();
          });
        };
      });
    };
    MockSubscriptionLink2.prototype.simulateResult = function(result, complete) {
      var _this = this;
      if (complete === void 0) {
        complete = false;
      }
      setTimeout(function() {
        var observers = _this.observers;
        if (!observers.length)
          throw new Error("subscription torn down");
        observers.forEach(function(observer) {
          if (result.result && observer.next)
            observer.next(result.result);
          if (result.error && observer.error)
            observer.error(result.error);
          if (complete && observer.complete)
            observer.complete();
        });
      }, result.delay || 0);
    };
    MockSubscriptionLink2.prototype.simulateComplete = function() {
      var observers = this.observers;
      if (!observers.length)
        throw new Error("subscription torn down");
      observers.forEach(function(observer) {
        if (observer.complete)
          observer.complete();
      });
    };
    MockSubscriptionLink2.prototype.onSetup = function(listener) {
      this.setups = this.setups.concat([listener]);
    };
    MockSubscriptionLink2.prototype.onUnsubscribe = function(listener) {
      this.unsubscribers = this.unsubscribers.concat([listener]);
    };
    return MockSubscriptionLink2;
  }(ApolloLink)
);

// node_modules/.pnpm/@apollo+client@3.9.9_@types+react@18.2.23_graphql@16.8.1_react-dom@18.2.0_react@18.2.0/node_modules/@apollo/client/testing/core/itAsync.js
function wrap(key) {
  return function(message, callback, timeout) {
    return (key ? it[key] : it)(message, function() {
      var _this = this;
      return new Promise(function(resolve, reject) {
        return callback.call(_this, resolve, reject);
      });
    }, timeout);
  };
}
var wrappedIt = wrap();
var itAsync = Object.assign(function() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  return wrappedIt.apply(this, args);
}, {
  only: wrap("only"),
  skip: wrap("skip"),
  todo: wrap("todo")
});

// node_modules/.pnpm/@apollo+client@3.9.9_@types+react@18.2.23_graphql@16.8.1_react-dom@18.2.0_react@18.2.0/node_modules/@apollo/client/testing/react/MockedProvider.js
var MockedProvider = (
  /** @class */
  function(_super) {
    __extends(MockedProvider2, _super);
    function MockedProvider2(props) {
      var _this = _super.call(this, props) || this;
      var _a = _this.props, mocks = _a.mocks, addTypename = _a.addTypename, defaultOptions = _a.defaultOptions, cache = _a.cache, resolvers = _a.resolvers, link = _a.link, showWarnings = _a.showWarnings, _b = _a.connectToDevTools, connectToDevTools = _b === void 0 ? false : _b;
      var client = new ApolloClient({
        cache: cache || new InMemoryCache({ addTypename }),
        defaultOptions,
        connectToDevTools,
        link: link || new MockLink(mocks || [], addTypename, { showWarnings }),
        resolvers
      });
      _this.state = {
        client
      };
      return _this;
    }
    MockedProvider2.prototype.render = function() {
      var _a = this.props, children = _a.children, childProps = _a.childProps;
      var client = this.state.client;
      return React.isValidElement(children) ? React.createElement(ApolloProvider, { client }, React.cloneElement(React.Children.only(children), __assign({}, childProps))) : null;
    };
    MockedProvider2.prototype.componentWillUnmount = function() {
      this.state.client.stop();
    };
    MockedProvider2.defaultProps = {
      addTypename: true
    };
    return MockedProvider2;
  }(React.Component)
);

// node_modules/.pnpm/@acme+acme.testing.mock-provider@1.0.6_@apollo+client@3.9.9_@testing-library+react@14.2.2_rea_kott2a6aoem2xaf77xrueejvxy/node_modules/@acme/acme.testing.mock-provider/dist/empty-container.js
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
function EmptyContainer({ children }) {
  return (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, { children });
}

// node_modules/.pnpm/@acme+acme.testing.mock-provider@1.0.6_@apollo+client@3.9.9_@testing-library+react@14.2.2_rea_kott2a6aoem2xaf77xrueejvxy/node_modules/@acme/acme.testing.mock-provider/dist/mock-provider-context.js
var import_react = __toESM(require_react(), 1);
var MockContext = (0, import_react.createContext)(false);

// node_modules/.pnpm/@acme+acme.testing.mock-provider@1.0.6_@apollo+client@3.9.9_@testing-library+react@14.2.2_rea_kott2a6aoem2xaf77xrueejvxy/node_modules/@acme/acme.testing.mock-provider/dist/mock-provider.js
function MockProvider({ children, noRouter, noTheme }) {
  const Theme = noTheme ? EmptyContainer : AcmeTheme;
  const Router = noRouter ? EmptyContainer : MemoryRouter;
  return (0, import_jsx_runtime2.jsx)(MockContext.Provider, { value: true, children: (0, import_jsx_runtime2.jsx)(Router, { children: (0, import_jsx_runtime2.jsx)(Theme, { children: (0, import_jsx_runtime2.jsx)(MockedProvider, { addTypename: false, showWarnings: false, children }) }) }) });
}

// node_modules/.pnpm/@acme+acme.testing.mock-provider@1.0.6_@apollo+client@3.9.9_@testing-library+react@14.2.2_rea_kott2a6aoem2xaf77xrueejvxy/node_modules/@acme/acme.testing.mock-provider/dist/use-is-mock.js
var import_react2 = __toESM(require_react(), 1);
function useIsMock() {
  const isMock = (0, import_react2.useContext)(MockContext);
  return Boolean(isMock);
}
export {
  MockProvider,
  useIsMock
};
//# sourceMappingURL=@acme_acme__testing__mock-provider.js.map
