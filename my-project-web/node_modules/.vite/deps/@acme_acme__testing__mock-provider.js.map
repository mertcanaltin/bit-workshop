{
  "version": 3,
  "sources": ["../../../../../node_modules/.pnpm/@acme+acme.testing.mock-provider@1.0.6_@apollo+client@3.9.9_@testing-library+react@14.2.2_rea_kott2a6aoem2xaf77xrueejvxy/node_modules/@acme/acme.testing.mock-provider/mock-provider.tsx", "../../../../../node_modules/.pnpm/@apollo+client@3.9.9_@types+react@18.2.23_graphql@16.8.1_react-dom@18.2.0_react@18.2.0/node_modules/@apollo/src/testing/react/MockedProvider.tsx", "../../../../../node_modules/.pnpm/@apollo+client@3.9.9_@types+react@18.2.23_graphql@16.8.1_react-dom@18.2.0_react@18.2.0/node_modules/@apollo/src/testing/core/mocking/mockLink.ts", "../../../../../node_modules/.pnpm/@apollo+client@3.9.9_@types+react@18.2.23_graphql@16.8.1_react-dom@18.2.0_react@18.2.0/node_modules/@apollo/src/testing/core/mocking/mockSubscriptionLink.ts", "../../../../../node_modules/.pnpm/@apollo+client@3.9.9_@types+react@18.2.23_graphql@16.8.1_react-dom@18.2.0_react@18.2.0/node_modules/@apollo/src/testing/core/itAsync.ts", "../../../../../node_modules/.pnpm/@acme+acme.testing.mock-provider@1.0.6_@apollo+client@3.9.9_@testing-library+react@14.2.2_rea_kott2a6aoem2xaf77xrueejvxy/node_modules/@acme/acme.testing.mock-provider/empty-container.tsx", "../../../../../node_modules/.pnpm/@acme+acme.testing.mock-provider@1.0.6_@apollo+client@3.9.9_@testing-library+react@14.2.2_rea_kott2a6aoem2xaf77xrueejvxy/node_modules/@acme/acme.testing.mock-provider/mock-provider-context.tsx", "../../../../../node_modules/.pnpm/@acme+acme.testing.mock-provider@1.0.6_@apollo+client@3.9.9_@testing-library+react@14.2.2_rea_kott2a6aoem2xaf77xrueejvxy/node_modules/@acme/acme.testing.mock-provider/use-is-mock.ts"],
  "sourcesContent": ["import type { ReactNode } from 'react';\nimport { AcmeTheme } from '@acme/design.acme-theme';\nimport { MemoryRouter } from 'react-router-dom';\nimport { MockedProvider } from '@apollo/client/testing';\nimport { EmptyContainer } from './empty-container.js';\nimport { MockContext } from './mock-provider-context.js';\n\nexport type MockProviderProps = {\n  /**\n   * sets the component children.\n   */\n  children?: ReactNode;\n\n  /**\n   * do not use the memory router.\n   */\n  noRouter?: boolean;\n\n  /**\n   * do not use the theme.\n   */\n  noTheme?: boolean;\n};\n\n/**\n * a mock provider for testing and previewing components\n * in the Acme platform.\n */\nexport function MockProvider({ children, noRouter, noTheme }: MockProviderProps) {\n  const Theme = noTheme ? EmptyContainer : AcmeTheme;\n  const Router = noRouter ? EmptyContainer : MemoryRouter;\n  \n  return (\n    <MockContext.Provider value>\n      <Router>\n        <Theme>\n          <MockedProvider addTypename={false} showWarnings={false}>\n            {children}\n          </MockedProvider>\n        </Theme>\n      </Router>\n    </MockContext.Provider>\n  );\n}\n", "import * as React from \"react\";\n\nimport type { DefaultOptions } from \"../../core/index.js\";\nimport { ApolloClient } from \"../../core/index.js\";\nimport { InMemoryCache as Cache } from \"../../cache/index.js\";\nimport { ApolloProvider } from \"../../react/context/index.js\";\nimport type { MockedResponse } from \"../core/index.js\";\nimport { MockLink } from \"../core/index.js\";\nimport type { ApolloLink } from \"../../link/core/index.js\";\nimport type { Resolvers } from \"../../core/index.js\";\nimport type { ApolloCache } from \"../../cache/index.js\";\n\nexport interface MockedProviderProps<TSerializedCache = {}> {\n  mocks?: ReadonlyArray<MockedResponse<any, any>>;\n  addTypename?: boolean;\n  defaultOptions?: DefaultOptions;\n  cache?: ApolloCache<TSerializedCache>;\n  resolvers?: Resolvers;\n  childProps?: object;\n  children?: any;\n  link?: ApolloLink;\n  showWarnings?: boolean;\n  /**\n   * If set to true, the MockedProvider will try to connect to the Apollo DevTools.\n   * Defaults to false.\n   */\n  connectToDevTools?: boolean;\n}\n\nexport interface MockedProviderState {\n  client: ApolloClient<any>;\n}\n\nexport class MockedProvider extends React.Component<\n  MockedProviderProps,\n  MockedProviderState\n> {\n  public static defaultProps: MockedProviderProps = {\n    addTypename: true,\n  };\n\n  constructor(props: MockedProviderProps) {\n    super(props);\n\n    const {\n      mocks,\n      addTypename,\n      defaultOptions,\n      cache,\n      resolvers,\n      link,\n      showWarnings,\n      connectToDevTools = false,\n    } = this.props;\n    const client = new ApolloClient({\n      cache: cache || new Cache({ addTypename }),\n      defaultOptions,\n      connectToDevTools,\n      link: link || new MockLink(mocks || [], addTypename, { showWarnings }),\n      resolvers,\n    });\n\n    this.state = {\n      client,\n    };\n  }\n\n  public render() {\n    const { children, childProps } = this.props;\n    const { client } = this.state;\n\n    return React.isValidElement(children) ?\n        <ApolloProvider client={client}>\n          {React.cloneElement(React.Children.only(children), { ...childProps })}\n        </ApolloProvider>\n      : null;\n  }\n\n  public componentWillUnmount() {\n    // Since this.state.client was created in the constructor, it's this\n    // MockedProvider's responsibility to terminate it.\n    this.state.client.stop();\n  }\n}\n", "import { invariant } from \"../../../utilities/globals/index.js\";\n\nimport { equal } from \"@wry/equality\";\n\nimport type {\n  Operation,\n  GraphQLRequest,\n  FetchResult,\n} from \"../../../link/core/index.js\";\nimport { ApolloLink } from \"../../../link/core/index.js\";\n\nimport {\n  Observable,\n  addTypenameToDocument,\n  removeClientSetsFromDocument,\n  removeConnectionDirectiveFromDocument,\n  cloneDeep,\n  stringifyForDisplay,\n  print,\n} from \"../../../utilities/index.js\";\n\nexport type ResultFunction<T, V = Record<string, any>> = (variables: V) => T;\n\nexport type VariableMatcher<V = Record<string, any>> = (\n  variables: V\n) => boolean;\n\nexport interface MockedResponse<\n  TData = Record<string, any>,\n  TVariables = Record<string, any>,\n> {\n  request: GraphQLRequest<TVariables>;\n  maxUsageCount?: number;\n  result?: FetchResult<TData> | ResultFunction<FetchResult<TData>, TVariables>;\n  error?: Error;\n  delay?: number;\n  variableMatcher?: VariableMatcher<TVariables>;\n  newData?: ResultFunction<FetchResult<TData>, TVariables>;\n}\n\nexport interface MockLinkOptions {\n  showWarnings?: boolean;\n}\n\nfunction requestToKey(request: GraphQLRequest, addTypename: Boolean): string {\n  const queryString =\n    request.query &&\n    print(addTypename ? addTypenameToDocument(request.query) : request.query);\n  const requestKey = { query: queryString };\n  return JSON.stringify(requestKey);\n}\n\nexport class MockLink extends ApolloLink {\n  public operation!: Operation;\n  public addTypename: Boolean = true;\n  public showWarnings: boolean = true;\n  private mockedResponsesByKey: { [key: string]: MockedResponse[] } = {};\n\n  constructor(\n    mockedResponses: ReadonlyArray<MockedResponse<any, any>>,\n    addTypename: Boolean = true,\n    options: MockLinkOptions = Object.create(null)\n  ) {\n    super();\n    this.addTypename = addTypename;\n    this.showWarnings = options.showWarnings ?? true;\n\n    if (mockedResponses) {\n      mockedResponses.forEach((mockedResponse) => {\n        this.addMockedResponse(mockedResponse);\n      });\n    }\n  }\n\n  public addMockedResponse(mockedResponse: MockedResponse) {\n    const normalizedMockedResponse =\n      this.normalizeMockedResponse(mockedResponse);\n    const key = requestToKey(\n      normalizedMockedResponse.request,\n      this.addTypename\n    );\n    let mockedResponses = this.mockedResponsesByKey[key];\n    if (!mockedResponses) {\n      mockedResponses = [];\n      this.mockedResponsesByKey[key] = mockedResponses;\n    }\n    mockedResponses.push(normalizedMockedResponse);\n  }\n\n  public request(operation: Operation): Observable<FetchResult> | null {\n    this.operation = operation;\n    const key = requestToKey(operation, this.addTypename);\n    const unmatchedVars: Array<Record<string, any>> = [];\n    const requestVariables = operation.variables || {};\n    const mockedResponses = this.mockedResponsesByKey[key];\n    const responseIndex =\n      mockedResponses ?\n        mockedResponses.findIndex((res, index) => {\n          const mockedResponseVars = res.request.variables || {};\n          if (equal(requestVariables, mockedResponseVars)) {\n            return true;\n          }\n          if (res.variableMatcher && res.variableMatcher(operation.variables)) {\n            return true;\n          }\n          unmatchedVars.push(mockedResponseVars);\n          return false;\n        })\n      : -1;\n\n    const response =\n      responseIndex >= 0 ? mockedResponses[responseIndex] : void 0;\n\n    // There have been platform- and engine-dependent differences with\n    // setInterval(fn, Infinity), so we pass 0 instead (but detect\n    // Infinity where we call observer.error or observer.next to pend\n    // indefinitely in those cases.)\n    const delay = response?.delay === Infinity ? 0 : response?.delay ?? 0;\n\n    let configError: Error;\n\n    if (!response) {\n      configError = new Error(\n        `No more mocked responses for the query: ${print(operation.query)}\nExpected variables: ${stringifyForDisplay(operation.variables)}\n${\n  unmatchedVars.length > 0 ?\n    `\nFailed to match ${unmatchedVars.length} mock${\n      unmatchedVars.length === 1 ? \"\" : \"s\"\n    } for this query. The mocked response had the following variables:\n${unmatchedVars.map((d) => `  ${stringifyForDisplay(d)}`).join(\"\\n\")}\n`\n  : \"\"\n}`\n      );\n\n      if (this.showWarnings) {\n        console.warn(\n          configError.message +\n            \"\\nThis typically indicates a configuration error in your mocks \" +\n            \"setup, usually due to a typo or mismatched variable.\"\n        );\n      }\n    } else {\n      if (response.maxUsageCount && response.maxUsageCount > 1) {\n        response.maxUsageCount--;\n      } else {\n        mockedResponses.splice(responseIndex, 1);\n      }\n      const { newData } = response;\n      if (newData) {\n        response.result = newData(operation.variables);\n        mockedResponses.push(response);\n      }\n\n      if (!response.result && !response.error && response.delay !== Infinity) {\n        configError = new Error(\n          `Mocked response should contain either \\`result\\`, \\`error\\` or a \\`delay\\` of \\`Infinity\\`: ${key}`\n        );\n      }\n    }\n\n    return new Observable((observer) => {\n      const timer = setTimeout(() => {\n        if (configError) {\n          try {\n            // The onError function can return false to indicate that\n            // configError need not be passed to observer.error. For\n            // example, the default implementation of onError calls\n            // observer.error(configError) and then returns false to\n            // prevent this extra (harmless) observer.error call.\n            if (this.onError(configError, observer) !== false) {\n              throw configError;\n            }\n          } catch (error) {\n            observer.error(error);\n          }\n        } else if (response && response.delay !== Infinity) {\n          if (response.error) {\n            observer.error(response.error);\n          } else {\n            if (response.result) {\n              observer.next(\n                typeof response.result === \"function\" ?\n                  response.result(operation.variables)\n                : response.result\n              );\n            }\n            observer.complete();\n          }\n        }\n      }, delay);\n\n      return () => {\n        clearTimeout(timer);\n      };\n    });\n  }\n\n  private normalizeMockedResponse(\n    mockedResponse: MockedResponse\n  ): MockedResponse {\n    const newMockedResponse = cloneDeep(mockedResponse);\n    const queryWithoutConnection = removeConnectionDirectiveFromDocument(\n      newMockedResponse.request.query\n    );\n    invariant(queryWithoutConnection, \"query is required\");\n    newMockedResponse.request.query = queryWithoutConnection!;\n    const query = removeClientSetsFromDocument(newMockedResponse.request.query);\n    if (query) {\n      newMockedResponse.request.query = query;\n    }\n\n    mockedResponse.maxUsageCount = mockedResponse.maxUsageCount ?? 1;\n    invariant(\n      mockedResponse.maxUsageCount > 0,\n      `Mock response maxUsageCount must be greater than 0, %s given`,\n      mockedResponse.maxUsageCount\n    );\n\n    this.normalizeVariableMatching(newMockedResponse);\n    return newMockedResponse;\n  }\n\n  private normalizeVariableMatching(mockedResponse: MockedResponse) {\n    const variables = mockedResponse.request.variables;\n    if (mockedResponse.variableMatcher && variables) {\n      throw new Error(\n        \"Mocked response should contain either variableMatcher or request.variables\"\n      );\n    }\n\n    if (!mockedResponse.variableMatcher) {\n      mockedResponse.variableMatcher = (vars) => {\n        const requestVariables = vars || {};\n        const mockedResponseVariables = variables || {};\n        return equal(requestVariables, mockedResponseVariables);\n      };\n    }\n  }\n}\n\nexport interface MockApolloLink extends ApolloLink {\n  operation?: Operation;\n}\n\n// Pass in multiple mocked responses, so that you can test flows that end up\n// making multiple queries to the server.\n// NOTE: The last arg can optionally be an `addTypename` arg.\nexport function mockSingleLink(...mockedResponses: Array<any>): MockApolloLink {\n  // To pull off the potential typename. If this isn't a boolean, we'll just\n  // set it true later.\n  let maybeTypename = mockedResponses[mockedResponses.length - 1];\n  let mocks = mockedResponses.slice(0, mockedResponses.length - 1);\n\n  if (typeof maybeTypename !== \"boolean\") {\n    mocks = mockedResponses;\n    maybeTypename = true;\n  }\n\n  return new MockLink(mocks, maybeTypename);\n}\n", "import { Observable } from \"../../../utilities/index.js\";\nimport type { FetchResult, Operation } from \"../../../link/core/index.js\";\nimport { ApolloLink } from \"../../../link/core/index.js\";\n\nexport interface MockedSubscription {\n  request: Operation;\n}\n\nexport interface MockedSubscriptionResult {\n  result?: FetchResult;\n  error?: Error;\n  delay?: number;\n}\n\nexport class MockSubscriptionLink extends ApolloLink {\n  public unsubscribers: any[] = [];\n  public setups: any[] = [];\n  public operation?: Operation;\n\n  private observers: any[] = [];\n\n  constructor() {\n    super();\n  }\n\n  public request(operation: Operation) {\n    this.operation = operation;\n    return new Observable<FetchResult>((observer) => {\n      this.setups.forEach((x) => x());\n      this.observers.push(observer);\n      return () => {\n        this.unsubscribers.forEach((x) => x());\n      };\n    });\n  }\n\n  public simulateResult(result: MockedSubscriptionResult, complete = false) {\n    setTimeout(() => {\n      const { observers } = this;\n      if (!observers.length) throw new Error(\"subscription torn down\");\n      observers.forEach((observer) => {\n        if (result.result && observer.next) observer.next(result.result);\n        if (result.error && observer.error) observer.error(result.error);\n        if (complete && observer.complete) observer.complete();\n      });\n    }, result.delay || 0);\n  }\n\n  public simulateComplete() {\n    const { observers } = this;\n    if (!observers.length) throw new Error(\"subscription torn down\");\n    observers.forEach((observer) => {\n      if (observer.complete) observer.complete();\n    });\n  }\n\n  public onSetup(listener: any): void {\n    this.setups = this.setups.concat([listener]);\n  }\n\n  public onUnsubscribe(listener: any): void {\n    this.unsubscribers = this.unsubscribers.concat([listener]);\n  }\n}\n\nexport function mockObservableLink(): MockSubscriptionLink {\n  return new MockSubscriptionLink();\n}\n", "function wrap(key?: \"only\" | \"skip\" | \"todo\") {\n  return (\n    message: string,\n    callback: (\n      resolve: (result?: any) => void,\n      reject: (reason?: any) => void\n    ) => any,\n    timeout?: number\n  ) =>\n    (key ? it[key] : it)(\n      message,\n      function (this: unknown) {\n        return new Promise((resolve, reject) =>\n          callback.call(this, resolve, reject)\n        );\n      },\n      timeout\n    );\n}\n\nconst wrappedIt = wrap();\n\nexport const itAsync = Object.assign(\n  function (this: unknown, ...args: Parameters<typeof wrappedIt>) {\n    return wrappedIt.apply(this, args);\n  },\n  {\n    only: wrap(\"only\"),\n    skip: wrap(\"skip\"),\n    todo: wrap(\"todo\"),\n  }\n);\n", "import React from 'react';\n\nexport function EmptyContainer({ children }: React.PropsWithChildren) {\n  return <>{children}</>;\n}", "import { createContext } from 'react';\n\n/**\n * context for the running in mock mode.\n */\nexport const MockContext = createContext<boolean>(false);\n", "import { useContext } from 'react';\nimport { MockContext } from './mock-provider-context.js';\n\n/**\n * determine whether a component\n * is running in a mocked context\n */\nexport function useIsMock() {\n  const isMock = useContext(MockContext);\n  return Boolean(isMock);\n}\n"],
  "mappings": "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",
  "names": ["MockLink", "MockSubscriptionLink", "MockedProvider", "_jsx", "_Fragment", "_jsx", "import_react"]
}
