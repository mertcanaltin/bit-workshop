{
  "version": 3,
  "sources": ["../../../../../node_modules/.pnpm/@teambit+base-react.themes.theme-provider@1.0.0_react-dom@18.2.0_react@18.2.0/node_modules/@teambit/base-react.themes.theme-provider/create-theme-provider.tsx", "../../../../../node_modules/.pnpm/@teambit+base-react.themes.theme-provider@1.0.0_react-dom@18.2.0_react@18.2.0/node_modules/@teambit/base-react.themes.theme-provider/create-theme.tsx", "../../../../../node_modules/.pnpm/@teambit+base-react.themes.theme-provider@1.0.0_react-dom@18.2.0_react@18.2.0/node_modules/@teambit/base-react.themes.theme-provider/index.ts"],
  "sourcesContent": ["import React, { useMemo } from 'react';\nimport type { CreateThemeOptions } from './create-theme';\n\nexport type ThemeProviderProps<T> = {\n  overrides?: Partial<T>;\n} & React.HTMLAttributes<HTMLDivElement>;\n\nexport type ThemeProviderType<T> = React.ComponentType<ThemeProviderProps<T>>;\n\nfunction createKey(key: string, formerKey: string) {\n  if (!formerKey) return key;\n  return `${formerKey}.${key}`;\n}\n\nfunction listTokens<T>(theme: T, formerKey?: string) {\n  const entries = Object.entries(theme);\n  const tokens = entries.flatMap(([key, value]) => {\n    const tokenKey = createKey(key, formerKey);\n    if (typeof value === 'object') return listTokens(value, tokenKey);\n    return [\n      [tokenKey, value]\n    ]\n  });\n\n  return tokens;\n}\n\nexport function computeCssVars<T>(theme: T, prefix?: string): React.CSSProperties {  \n  const tokens = listTokens(theme);\n  return tokens\n    .map(([key, val]) => {\n      const varName = key.replace(/\\./g, '-').replace(/[A-Z]/g, '-$&').toLowerCase();\n      const varKey = prefix ? `--${prefix}-${varName}` : `--${varName}`;\n      return [varKey, val];\n    })\n    .reduce((acc, [key, val]) => {\n      acc[key] = val;\n      return acc;\n    }, {});\n}\n\nexport function createThemeProvider<T>(\n  ThemeContext: React.Context<T>,\n  options: CreateThemeOptions<T>\n) {\n  return ({ children, overrides, style, ...rest }: ThemeProviderProps<T>) => {\n    const theme = useMemo(\n      () => ({\n        ...options.theme,\n        ...overrides,\n      }),\n      [options.theme, overrides]\n    );\n\n    if (options.withoutCssVars) return <ThemeContext.Provider value={theme}>{children}</ThemeContext.Provider>;\n    const cssVars = computeCssVars<T>(theme, options.prefix);\n\n    return (\n      <div style={{ ...cssVars, ...style }} {...rest}>\n        <ThemeContext.Provider value={theme}>{children}</ThemeContext.Provider>\n      </div>\n    );\n  };\n}\n", "import React, { createContext, useContext } from 'react';\nimport { createThemeProvider, ThemeProviderType } from './create-theme-provider';\n\nexport type CreateThemeOptions<T> = {\n  /**\n   * theme object.\n   */\n  theme: T;\n\n  /**\n   * determine whether to render theme into css vars.\n   */\n  withoutCssVars?: boolean;\n\n  /**\n   * prefix to use for css vars. defaults to nothing.\n   */\n  prefix?: string;\n};\n\n/**\n * Type of a Theme instance.\n */\nexport type ThemeType<T> = {\n  ThemeProvider: ThemeProviderType<T>;\n  useTheme: () => T;\n};\n\n/**\n * create a new theme.\n */\nexport function createTheme<T>({ theme, prefix, withoutCssVars }: CreateThemeOptions<T>) {\n  const ThemeContext: React.Context<T> = createContext<T>(theme);\n\n  const ThemeProvider = createThemeProvider<T>(ThemeContext, {\n    theme,\n    prefix,\n    withoutCssVars,\n  });\n\n  const useTheme = () => {\n    return useContext(ThemeContext);\n  };\n\n  return {\n    ThemeProvider,\n    useTheme,\n  };\n}\n\nexport type ThemeProps<T> = {\n  schema: T;\n};\n", "export { createTheme } from './create-theme';\nexport type { CreateThemeOptions } from './create-theme';\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,QAAA,UAAA,aAAA,eAAA;AASA,aAAS,UAAU,KAAa,WAAiB;AAC/C,UAAI,CAAC;AAAW,eAAO;AACvB,aAAO,GAAG,SAAS,IAAI,GAAG;IAC5B;AAEA,aAAS,WAAc,OAAU,WAAkB;AACjD,YAAM,UAAU,OAAO,QAAQ,KAAK;AACpC,YAAM,SAAS,QAAQ,QAAQ,CAAC,CAAC,KAAK,KAAK,MAAK;AAC9C,cAAM,WAAW,UAAU,KAAK,SAAS;AACzC,YAAI,OAAO,UAAU;AAAU,iBAAO,WAAW,OAAO,QAAQ;AAChE,eAAO;UACL,CAAC,UAAU,KAAK;;MAEpB,CAAC;AAED,aAAO;IACT;AAEA,aAAgB,eAAkB,OAAU,QAAe;AACzD,YAAM,SAAS,WAAW,KAAK;AAC/B,aAAO,OACJ,IAAI,CAAC,CAAC,KAAK,GAAG,MAAK;AAClB,cAAM,UAAU,IAAI,QAAQ,OAAO,GAAG,EAAE,QAAQ,UAAU,KAAK,EAAE,YAAW;AAC5E,cAAM,SAAS,SAAS,KAAK,MAAM,IAAI,OAAO,KAAK,KAAK,OAAO;AAC/D,eAAO,CAAC,QAAQ,GAAG;MACrB,CAAC,EACA,OAAO,CAAC,KAAK,CAAC,KAAK,GAAG,MAAK;AAC1B,YAAI,GAAG,IAAI;AACX,eAAO;MACT,GAAG,CAAA,CAAE;IACT;AAZA,YAAA,iBAAA;AAcA,aAAgB,oBACd,cACA,SAA8B;AAE9B,aAAO,CAAC,OAAkE;YAAlE,EAAE,UAAU,WAAW,MAAK,IAAA,IAAK,OAAI,OAAA,IAArC,CAAA,YAAA,aAAA,OAAA,CAAuC;AAC7C,cAAM,SAAQ,GAAA,QAAA,SACZ,MAAM,OAAA,OAAA,OAAA,OAAA,CAAA,GACD,QAAQ,KAAK,GACb,SAAS,GAEd,CAAC,QAAQ,OAAO,SAAS,CAAC;AAG5B,YAAI,QAAQ;AAAgB,iBAAO,QAAA,QAAA,cAAC,aAAa,UAAQ,EAAC,OAAO,MAAK,GAAG,QAAQ;AACjF,cAAM,UAAU,eAAkB,OAAO,QAAQ,MAAM;AAEvD,eACE,QAAA,QAAA;UAAA;UAAA,OAAA,OAAA,EAAK,OAAK,OAAA,OAAA,OAAA,OAAA,CAAA,GAAO,OAAO,GAAK,KAAK,EAAA,GAAQ,IAAI;UAC5C,QAAA,QAAA,cAAC,aAAa,UAAQ,EAAC,OAAO,MAAK,GAAG,QAAQ;QAAyB;MAG7E;IACF;AAtBA,YAAA,sBAAA;;;;;;;;;;ACzCA,QAAA,UAAA;AACA,QAAA,0BAAA;AA8BA,aAAgB,YAAe,EAAE,OAAO,QAAQ,eAAc,GAAyB;AACrF,YAAM,gBAAiC,GAAA,QAAA,eAAiB,KAAK;AAE7D,YAAM,iBAAgB,GAAA,wBAAA,qBAAuB,cAAc;QACzD;QACA;QACA;OACD;AAED,YAAM,WAAW,MAAK;AACpB,gBAAO,GAAA,QAAA,YAAW,YAAY;MAChC;AAEA,aAAO;QACL;QACA;;IAEJ;AAjBA,YAAA,cAAA;;;;;;;;;AC/BA,QAAA,iBAAA;AAAS,WAAA,eAAA,SAAA,eAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,aAAA,eAAA;IAAW,EAAA,CAAA;;;",
  "names": []
}
